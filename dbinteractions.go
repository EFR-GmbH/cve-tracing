package main

import (
	"context"
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"time"
)

var Db *sql.DB

func dsn(dbcfg DatabaseConfigurations) string {
	return fmt.Sprintf("%s:%s@tcp(%s)/%s", dbcfg.DBUser, dbcfg.DBPassword, dbcfg.DBHostname, dbcfg.DBName)
}

func escape(source string) string {
	j := 0
	if len(source) == 0 {
		return ""
	}
	tempStr := source[:]
	desc := make([]byte, len(tempStr)*2)
	for i := 0; i < len(tempStr); i++ {
		flag := true
		var escape byte
		switch tempStr[i] {
		case '\r':
			escape = '\r'
			break
		case '\n':
			escape = '\n'
			break
		case '\\':
			escape = '\\'
			break
		case '\'':
			escape = '\''
			break
		case '"':
			escape = '"'
			break
		case '\032':
			escape = 'Z'
			break
		default:
			flag = false
		}
		if flag {
			desc[j] = '\\'
			desc[j+1] = escape
			j = j + 2
		} else {
			desc[j] = tempStr[i]
			j = j + 1
		}
	}
	return string(desc[0:j])
}
func dbOpen(configuration Configurations) {
	var err error
	Db, err = sql.Open("mysql", dsn(configuration.Database))
	// db, err := sql.Open("mysql", "matthias@tcp(0.0.0.0:3306)/cvetracking")
	onError(err)

	ctx, cancelf := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancelf()
	err = Db.PingContext(ctx)
	onError(err)

	fmt.Printf("Connected to DB %s successfully\n", configuration.Database.DBName)
}
